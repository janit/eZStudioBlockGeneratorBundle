<?php

namespace {{ namespace }}\Model;

{% block use_statements %}
use EzSystems\LandingPageFieldTypeBundle\Exception\InvalidBlockAttributeException;
use EzSystems\LandingPageFieldTypeBundle\FieldType\LandingPage\Definition\BlockAttributeDefinition;
use EzSystems\LandingPageFieldTypeBundle\FieldType\LandingPage\Definition\BlockDefinition;
use EzSystems\LandingPageFieldTypeBundle\FieldType\LandingPage\Model\AbstractBlockType;
use EzSystems\LandingPageFieldTypeBundle\FieldType\LandingPage\Model\BlockType;
use EzSystems\LandingPageFieldTypeBundle\FieldType\LandingPage\Model\BlockValue;
{% endblock use_statements %}

class {{ blockname_lower }}block extends AbstractBlockType implements BlockType
{

    /**
     * Returns array of parameters required to render block template.
     *
     * @param array $blockValue Block value attributes
     *
     * @return array Template parameters
     */
    public function getTemplateParameters(BlockValue $blockValue)
    {
        return ['block' => $blockValue];
    }

    /**
    * Creates BlockDefinition object for block type.
    *
    * @return \EzSystems\LandingPageFieldTypeBundle\FieldType\LandingPage\Definition\BlockDefinition
    */
    public function createBlockDefinition()
    {
        $block = new BlockDefinition(
            '{{ blockname_lower }}block',
            '{{ blockname }}',
            'default',
            'bundles/{{ bundle_basename|lower }}/images/newblock.svg',
            [],
            [
                {% for type in type -%}
                new BlockAttributeDefinition(
                'field{{ loop.index }}',
                'Field {{ loop.index }}',
                '{{ type }}',
                {% if type == "text" -%}
                    '/[^\\s]/',
                {% elseif type == "integer" -%}
                    '/[0-9]+/',
                {% elseif type == "string" -%}
                    '/[^\\s]/',
                {% elseif type == "multiple" -%}
                    '/^([a-zA-Z_-]+|,[a-zA-Z_-]+)+$/i',
                {% elseif type == "embed" -%}
                    '/^([a-zA-Z]:)?(\/[a-zA-Z0-9_\/-]+)+\/?/',
                {% endif -%}
                'Field {{ type }}'
                ),
                {% endfor -%}
            ]
        );

        return $block;
    }

    /**
    * Checks if block's attributes are valid.
    *
    * @param array $attributes
    *
    * @throws \EzSystems\LandingPageFieldTypeBundle\Exception\InvalidBlockAttributeException
    */
    public function checkAttributesStructure(array $attributes)
    {
        {% for type in type -%}
        if (!isset($attributes['field{{ loop.index }}'])) {
        throw new InvalidBlockAttributeException('{{ blockname }}', 'field{{ loop.index }}', 'Field {{ loop.index }} must be set.');
        }
        {% endfor %}
    }
}